#+title: Format Specifiers
#+layout: page

* Format Specifiers

Format specifiers are used when displaying variables as output (they can also be
used for converting data, but we'll just use them for displaying variables for
now), they specify the type of data of the variable to be displayed.

For example, let's suppose you have the following variable:

#+BEGIN_SRC c
  int sum = 89;
#+END_SRC

If we were to display that variable to the screen, we'd use the =%d= format
specifiers like this:

#+BEGIN_SRC c
  printf ("The sum is %d\n", sum);
#+END_SRC

As we already know, the =printf= function can display as output the values of
variables, in this example it has two items or arguments enclosed within the
parentheses, these arguments are separated by a comma (=,=). The first argument
to the =printf= function is always the character string to be displayed, along
with the display of the character string, you might also frequently want to have
the value of certain program variables displayed.

The percent character (=%=) inside the first argument, is a special character
recognised by the =printf= function, the character that immediately follows the
percent sign specifies what type of value is going to be displayed.

Look at this example:

#+BEGIN_SRC c
  #include <stdio.h>

  int
  main (void)
  {
    int integer_var = 100;
    float floating_var = 331.79f;
    double double_var = 8.44e+11;
    char char_var = 'W';

    _Bool bool_var = 0;

    printf ("integer_var = %d\n", integer_var);
    printf ("floating_var = %f\n", floating_var);
    printf ("double_var = %e\n", double_var);
    printf ("double_var = %g\n", double_var);
    printf ("char_var = %c\n", char_var);
    printf ("bool_var = %d\n", bool_var);

    return 0;
  }
#+END_SRC

You can access that code [[https://github.com/walizw/QuadwordSources/blob/main/c/4_format_specifiers.c][here]].

The output of that program would be the following:

#+BEGIN_SRC text
    integer_var = 100
    floating_var = 331.790009
    double_var = 8.440000e+11
    double_var = 8.44e+11
    char_var = W
    bool_var = 0
#+END_SRC

We can also display more than one variable in just one =printf= call:

#+BEGIN_SRC c
  printf ("%d %d\n", var1, var2);
#+END_SRC

We can also change the precission of the format specifiers, for example, in the
previous example where we defined =floating_var=, we assigned it a value of
=331.79f= but =331.790009= got printed out to the screen, but if we wanted only
two zeros to be printed to the screen we could do:

#+BEGIN_SRC c
  printf ("%.2f\n", floating_var);
#+END_SRC

And now =331.79= got printed out, if we wanted three zeros or decimal places,
we'd change =.2f= to =.3f= and now =331.790= is printed out on the screen, and
if we made =.30f= the number =331.790008544921875000000000000000= would be
printed on the screen.

The following is a table of the available format specifiers for the different
data types we already know:

| Type                   | Constant Examples                 | Format Specifier |
|------------------------+-----------------------------------+------------------|
| char                   | 'a', '\n'                         | %c               |
| _Bool                  | 0, 1                              | %i, %u, %d       |
| short int              | --                                | %hi, %hx, %ho    |
| unsigned short int     | --                                | %hu, %hx, %ho    |
| int                    | -12, 97, 0xFFE0, 0177             | %i, %x, %o, %d   |
| unsigned int           | 12u, -2001, 0xFFu                 | %u, %x, %o, %d   |
| long int               | 12L, -2001, 0xffffL               | %li, %lx, %lo    |
| unsigned long int      | 12UL, 100ul, 0xffeeUL             | %lu, %lx, %lo    |
| long long int          | 0xe5e5e5e5LL, 500ll               | %lli, %llx, %llo |
| unsigned long long int | 12ull, 0xffeeULL                  | %llu, %llx, %llo |
| float                  | 12.34f, 3.1e-5f, 0x1.5p10, 0x1P-1 | %f, %e, %g, %a   |
| double                 | 12.34, 3.1e-5, 0x.1p3             | %f, %e, %g, %a   |
| long double            | 12.341, 3.1e-51                   | %Lf, %Le, %Lg    |
