#+title: Basic Datatypes
#+layout: page

* Basic Datatypes

We know, up until this point, that C supports many different types of variables
and each type of variable is used for storing different kinds of data, there are
types that store integers, there are types that store non-integral numerical
values, there are types that store characters, and many, many more.

Some examples of basic data types in C are:
- int
- float
- double
- char
- _Bool

The difference between the types is the amount of memory they occupy and the
range of values they can hold, the amount of storage that is allocated to store
a particular type of data depends on the computer you are running
(machine-dependant), an integer might take up 32 bits on your computer, or it
might be stored in 64.

** int

A variable of type int can be used to contain integral values only (values that
do not contain decimal places), a minus sign (=-=) preceding the value of the
variable, indicates that it is negative. The int type is a signed integer, it
must be an integer and it can be positive, negative or zero.

If an integer is preceded by a zero and the letter x (either lowercase or
uppercase), the value is taken as being expressed in hexadecimal (base 16)
notation, for example:

#+BEGIN_SRC c
  int rgb_color = 0xFFEF0D;
#+END_SRC

The values =158=, =-10= and =0= are all valid examples of integer constants,
no embedded spaces are permitted between the digits, values larger than =999=
cannot be expressed using commas (=12,000= must be written as =12000=)

** float

A variable to be of type float can be used for storing floating-point numbers,
basically, values containing decimal places.

The values =3.=, =125.8= and =-.0001= are all valid examples of floating-point
constants that can be assigned to a variable, floating-point constants can also
be expressed in scientific notation, =1.7e4= is a floating-point value expressed
in this notation and represents the value =1.7 * 10= to the power of 4.

** double

The double type is the same as type float, only with roughly twice the
precision, it is used whenever the range provided by a float variable is not
sufficient, can store twice as many significant digits and most computers
represent double values using 64 bits.

All floating-point constants are taken as double values by the C compiler, to
explicitly express a float constant, append either an =f= or an =F= to the end
of the number, for example, =12.5f=.

** _Bool

The =_Bool= datatype (also called boolean) can be used to store just the values
0 or 1, it is used for indicating an on or off, yes or no, true or fale
situation (also known as binary choices).

These types of variables are used in programs that need to indicate a boolean
condition, for example, a variable of this type might be used to indicate
whether all data has been read from a file.

Don't forget that 0 is used to indicate a false value, whereas 1 is used to
indicate a true value.

Let's look at an example where we define variables of different types:

#+BEGIN_SRC c
  #include <stdio.h>

  int
  main (void)
  {
    int integer_variable = 100;
    float floating_variable = 331.79f;
    double double_var = 8.44e+11;

    _Bool boolean_var = 0;

    return 0;
  }
#+END_SRC

You can access this code [[https://github.com/walizw/QuadwordSources/blob/main/c/3_datatypes.c][here]].

Notice that in the C99 standard you can use the =bool= datatype and use =true=
and =false= values instead of =_Bool= with =0= and =1= values. If you want to
use this, just include =stdbool.h= and you're ready to go:

#+BEGIN_SRC c
  #include <stdbool.h>

  int
  main (void)
  {
    bool my_bool_variable = true;
  }
#+END_SRC

* Other datatypes

Even though the =int= type will probably meet most of your integer needs when
beginning in C, there are many other integer types that gives the programmer
the option of matching a type to a particular use case, integer types vary in
the range of values offered and in whether negative numbers can be used.

C offers three adjective keywords to modify the basic integer type (can also
be used by itself), those three keywords are =short=, =long= and =unsigned=.

The type =short int=, or =short= might use less storage than int, thus saving
space when only small numbers are needed, it can be used when the program needs
a lot of memory and the amount of available memory is limited.

The same goes to the type =long int= or =long=, it might use more storage than
=int=, thus letting your express larger integer values. You might ask for
yourself "/why not just use a double?/", well, the double has decimal places,
and you probably just need to store a really really long integer value, so you'd
use =long int= rather than =double=.

You can also use =long long int= or =long long= and as well, it might use more
storage than =long=, a constant value of type =long int= is formed by optionally
appending the letter L (upper or lowercase) onto the end of an integer constant.
For example:

#+BEGIN_SRC c
  long int number_of_points = 1872989017L;
#+END_SRC

Type specifiers (what I referred to as adjective words before) can also be
applied to doubles, therefore you can do =long double=, a long double constant
is written as a floating constant with the letter =l= or =L= immediately
following, for example =1.234e+7L=.

The type =unsigned int= or =unsigned= is used for variables that only have
non-negative values (basically, the value will *ALWAYS* be positive). The value
of the value is now doubled.

#+BEGIN_SRC c
  unsigned int counter;
#+END_SRC

The keyword =signed= can be used with any of the signed types to make your
intent explicit, =short=, =short int=, =signed short=, and =signed short int=
are all names for the same type.
